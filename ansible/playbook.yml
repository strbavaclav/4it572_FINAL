- name: Deploy to AWS EC2
  hosts: localhost
  connection: local

  tasks:
    - name: Launch EC2 Instance
      ec2_instance:
        instance_type: t2.medium
        tags:
          Name: "eShop_production"
          Created: "{{ ansible_date_time.epoch }}"
        image_id: ami-0230bd60aa48260c6
        region: us-east-1
        key_name: ansible
        vpc_subnet_id: subnet-023f54cb0099708a1
        count: 1
        network:
          assign_public_ip: yes
        wait: yes
        security_group: eshop
        aws_access_key: "{{ access_key }}"
        aws_secret_key: "{{ secret_key }}"
        security_token: "{{ session_token }}"
      register: ec2_instance_result

    - name: Add EC2 Instance host to security_group
      add_host:
        hostname: "{{item.public_ip_address}}"
        groupname: launched
      loop: "{{ec2_instance_result.instances}}"

    - name: Wait for SSH connection
      delegate_to: "{{ item.public_ip_address }}"
      wait_for_connection:
        delay: 60
        timeout: 360
      loop: "{{ec2_instance_result.instances}}"
    
- name: Configure EC2 Instance
  hosts: launched
  connection: ssh
  vars:
    ansible_ssh_common_args: '-o StrictHostKeyChecking=no'

  tasks:
    - name: Install Git and Docker
      yum:
        name:
          - git
          - docker
        state: latest
        update_cache: yes
      become: yes

    - service:
        name: docker
        state: started
        enabled: yes
      become: yes

    - name: Start Docker on startup
      shell: systemctl enable docker
      become: yes
    
    - name: Set access rights to Docker
      shell: usermod -a -G docker ec2-user
      become: yes

    - name: Get eShop repo from Git
      git:
        repo: 'https://github.com/strbavaclav/4IT572_docker.git'
        dest: ./app
    
    - name: Build eShop Docker
      shell: cd app && docker build -t myeshop:latest .
      become: yes

    - name: Run eShop Docker
      shell: docker run -p 80:3000 myeshop
      async: 45
      poll: 0
      become: yes

    - wait_for:
        port:
          80

- name: Terminate Previous EC2 Instance
  hosts: localhost
  connection: local
  gather_facts: no

  tasks:
    - name: Find all instances by Tag
      ec2_instance_info:
        filters:
          "tag:Name": "eShop_production"
        region: us-east-1
        aws_access_key: "{{ access_key }}"
        aws_secret_key: "{{ secret_key }}"
        security_token: "{{ session_token }}"
      register: all_instances

    - name: Exclude the newest instance
      set_fact:
        instances_to_terminate: "{{ all_instances.instances | sort(attribute='launch_time') | reverse | list | slice(1, None) }}"
      
    - name: Terminate previous instances
      ec2_instance:
        state: 'absent'
        instance_ids: "{{ instances_to_terminate | map(attribute='instance_id') | list }}"
        aws_access_key: "{{ access_key }}"
        aws_secret_key: "{{ secret_key }}"
        security_token: "{{ session_token }}"
        region: us-east-1
      when: instances_to_terminate and instances_to_terminate | length > 0



      

