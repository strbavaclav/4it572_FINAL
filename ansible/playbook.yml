- name: Terminate Previous Instances
  hosts: localhost
  connection: local
  gather_facts: no

  tasks:
    - name: Check for previous instance IDs file
      stat:
        path: ./previous_instance_ids.txt
      register: prev_instance_file

    - name: Read previous instance IDs
      command: cat ./previous_instance_ids.txt
      register: prev_instance_ids
      when: prev_instance_file.stat.exists

    - name: Terminate previous instances
      ec2_instance:
        state: 'absent'
        instance_ids: "{{ (prev_instance_ids.stdout | from_json) }}"
        aws_access_key: "{{ access_key }}"
        aws_secret_key: "{{ secret_key }}"
        security_token: "{{ session_token }}"
        region: us-east-1
      when: prev_instance_ids is defined and prev_instance_ids.stdout != ''


- name: Deploy to EC2
  hosts: localhost
  connection: local

  tasks:
    - name: Launch EC2 Instance
      ec2_instance:
        instance_type: t2.medium
        image_id: ami-0230bd60aa48260c6
        region: us-east-1
        key_name: ansible
        vpc_subnet_id: subnet-023f54cb0099708a1
        count: 1
        network:
          assign_public_ip: yes
        wait: yes
        security_group: eshop
        aws_access_key: "{{ access_key }}"
        aws_secret_key: "{{ secret_key }}"
        security_token: "{{ session_token }}"
      register: ec2_instance_result

    - name: Add instance host to security_group
      add_host:
        hostname: "{{item.public_ip_address}}"
        groupname: launched
      loop: "{{ec2_instance_result.instances}}"

    - name: Wait for ssh connection
      delegate_to: "{{ item.public_ip_address }}"
      wait_for_connection:
        delay: 30
        timeout: 300
      loop: "{{ec2_instance_result.instances}}"
    
- name: Configure EC2
  hosts: launched
  connection: ssh
  vars:
    ansible_ssh_common_args: '-o StrictHostKeyChecking=no'

  tasks:
    - name: Install Git and Docker
      yum:
        name:
          - git
          - docker
        state: latest
        update_cache: yes
      become: yes

    - service:
        name: docker
        state: started
        enabled: yes
      become: yes

    - name: Start Docker on startup
      shell: systemctl enable docker
      become: yes
    
    - name: Set rights to Docker
      shell: usermod -a -G docker ec2-user
      become: yes

    - name: Get eshop from Git
      git:
        repo: 'https://github.com/strbavaclav/4IT572_docker.git'
        dest: ./app
    
    - name: Build Docker with eshop
      shell: cd app && docker build -t myeshop:latest .
      become: yes

    - name: Run Docker with eshop
      shell: docker run -p 80:3000 myeshop
      async: 45
      poll: 0
      become: yes

    - wait_for:
        port:
          80

- name: Save instance IDs for next run
  hosts: localhost
  connection: local
  gather_facts: no

  tasks:
    - name: Save instance IDs for next run
      local_action: copy content="{{ ec2_instance_result.instances | map(attribute='instance_id') | list }}" dest=./previous_instance_ids.txt
      when: ec2_instance_result is defined and ec2_instance_result.instances is defined


      

